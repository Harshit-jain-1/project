# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10PxcgO5FADLWop7whV-nQNxydZm18kGi
"""

import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import load_model

st.set_page_config(page_title="Stock Price Forecast", layout="wide")
st.title("ðŸ“ˆ Stock Trend & LSTM Price Prediction App")

def calculate_rsi(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=period, min_periods=period).mean()
    avg_loss = loss.rolling(window=period, min_periods=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

ticker = st.text_input("Enter Stock Ticker", "AAPL")
start_date = st.date_input("Start Date", pd.to_datetime("2015-01-01"))
end_date = st.date_input("End Date", pd.to_datetime("today"))

@st.cache_resource
def load_lstm_model():
    return load_model("lstm_stock_model.h5")

if st.button("Run"):
    df = yf.download(ticker, start=start_date, end=end_date)

    if df.empty:
        st.error("No data found. Check ticker symbol or date range.")
    else:
        st.success(f"Loaded {len(df)} rows for {ticker}.")

        df['MA50'] = df['Close'].rolling(window=50).mean()
        df['RSI'] = calculate_rsi(df['Close'])

        st.subheader("ðŸ“Š Close Price with MA50")
        fig1, ax1 = plt.subplots(figsize=(10, 4))
        ax1.plot(df.index, df['Close'], label="Close Price")
        ax1.plot(df.index, df['MA50'], label="MA50")
        ax1.set_xlabel("Date")
        ax1.set_ylabel("Price ($)")
        ax1.legend()
        st.pyplot(fig1)

        st.subheader("ðŸ“‰ RSI Indicator")
        fig2, ax2 = plt.subplots(figsize=(10, 3))
        ax2.plot(df.index, df['RSI'], label="RSI", color="purple")
        ax2.axhline(70, linestyle="--", color="red")
        ax2.axhline(30, linestyle="--", color="green")
        ax2.set_ylim(0, 100)
        ax2.set_ylabel("RSI")
        ax2.legend()
        st.pyplot(fig2)

       if st.button("Run"):
    df = yf.download(ticker, start=start_date, end=end_date)

    if df.empty:
        st.error("No data found. Check ticker or date range.")
    else:
        st.success(f"Loaded {len(df)} rows for {ticker}.")

        # Prepare data for LSTM prediction
        data = df.filter(['Close']).dropna()

        # Remove any rows with NaN or inf in dataset
        dataset = data.values
        dataset = dataset[~np.isnan(dataset).any(axis=1)]
        dataset = dataset[~np.isinf(dataset).any(axis=1)]

        if len(dataset) < 60:
            st.warning("Not enough data to run LSTM prediction (need at least 60 data points).")
        else:
            scaler = MinMaxScaler(feature_range=(0, 1))
            scaled_data = scaler.fit_transform(dataset)

            training_data_len = int(np.ceil(len(dataset) * 0.8))
            test_data = scaled_data[training_data_len - 60:]

            X_test = []
            for i in range(60, len(test_data)):
                X_test.append(test_data[i-60:i, 0])
            X_test = np.array(X_test)
            X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

            model = load_lstm_model()
            predictions = model.predict(X_test)
            predictions = scaler.inverse_transform(predictions)

            valid = data.iloc[training_data_len:].copy()
            valid['Predictions'] = predictions

            st.subheader("ðŸ¤– LSTM Stock Price Prediction")
            fig3, ax3 = plt.subplots(figsize=(10, 4))
            ax3.plot(data.index, data['Close'], label='Actual Price')
            ax3.plot(valid.index, valid['Predictions'], label='Predicted Price', color='orange')
            ax3.set_title("LSTM Prediction vs Actual Price")
            ax3.set_xlabel("Date")
            ax3.set_ylabel("Price ($)")
            ax3.legend()
            st.pyplot(fig3)
